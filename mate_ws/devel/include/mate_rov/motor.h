// Generated by gencpp from file mate_rov/motor.msg
// DO NOT EDIT!


#ifndef MATE_ROV_MESSAGE_MOTOR_H
#define MATE_ROV_MESSAGE_MOTOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mate_rov
{
template <class ContainerAllocator>
struct motor_
{
  typedef motor_<ContainerAllocator> Type;

  motor_()
    : X()
    , Y()
    , Z()
    , Roll()
    , Pitch()
    , Yaw()  {
    }
  motor_(const ContainerAllocator& _alloc)
    : X(_alloc)
    , Y(_alloc)
    , Z(_alloc)
    , Roll(_alloc)
    , Pitch(_alloc)
    , Yaw(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _X_type;
  _X_type X;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _Y_type;
  _Y_type Y;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _Z_type;
  _Z_type Z;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _Roll_type;
  _Roll_type Roll;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _Pitch_type;
  _Pitch_type Pitch;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _Yaw_type;
  _Yaw_type Yaw;




  typedef boost::shared_ptr< ::mate_rov::motor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mate_rov::motor_<ContainerAllocator> const> ConstPtr;

}; // struct motor_

typedef ::mate_rov::motor_<std::allocator<void> > motor;

typedef boost::shared_ptr< ::mate_rov::motor > motorPtr;
typedef boost::shared_ptr< ::mate_rov::motor const> motorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mate_rov::motor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mate_rov::motor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mate_rov

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'mate_rov': ['/home/yonahel/MATE_ROV/mate_ws/src/mate_rov/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::mate_rov::motor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mate_rov::motor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mate_rov::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mate_rov::motor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mate_rov::motor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mate_rov::motor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mate_rov::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5066de5107f3bf25538420ddaf86655";
  }

  static const char* value(const ::mate_rov::motor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5066de5107f3bf2ULL;
  static const uint64_t static_value2 = 0x5538420ddaf86655ULL;
};

template<class ContainerAllocator>
struct DataType< ::mate_rov::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mate_rov/motor";
  }

  static const char* value(const ::mate_rov::motor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mate_rov::motor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] X\n\
int8[] Y\n\
int8[] Z\n\
int8[] Roll\n\
int8[] Pitch\n\
int8[] Yaw\n\
";
  }

  static const char* value(const ::mate_rov::motor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mate_rov::motor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
      stream.next(m.Roll);
      stream.next(m.Pitch);
      stream.next(m.Yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mate_rov::motor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mate_rov::motor_<ContainerAllocator>& v)
  {
    s << indent << "X[]" << std::endl;
    for (size_t i = 0; i < v.X.size(); ++i)
    {
      s << indent << "  X[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.X[i]);
    }
    s << indent << "Y[]" << std::endl;
    for (size_t i = 0; i < v.Y.size(); ++i)
    {
      s << indent << "  Y[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Y[i]);
    }
    s << indent << "Z[]" << std::endl;
    for (size_t i = 0; i < v.Z.size(); ++i)
    {
      s << indent << "  Z[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Z[i]);
    }
    s << indent << "Roll[]" << std::endl;
    for (size_t i = 0; i < v.Roll.size(); ++i)
    {
      s << indent << "  Roll[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Roll[i]);
    }
    s << indent << "Pitch[]" << std::endl;
    for (size_t i = 0; i < v.Pitch.size(); ++i)
    {
      s << indent << "  Pitch[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Pitch[i]);
    }
    s << indent << "Yaw[]" << std::endl;
    for (size_t i = 0; i < v.Yaw.size(); ++i)
    {
      s << indent << "  Yaw[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.Yaw[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MATE_ROV_MESSAGE_MOTOR_H
