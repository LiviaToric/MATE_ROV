// Generated by gencpp from file mate_rov/imu.msg
// DO NOT EDIT!


#ifndef MATE_ROV_MESSAGE_IMU_H
#define MATE_ROV_MESSAGE_IMU_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mate_rov
{
template <class ContainerAllocator>
struct imu_
{
  typedef imu_<ContainerAllocator> Type;

  imu_()
    : ROLL()
    , PITCH()
    , YAW()  {
    }
  imu_(const ContainerAllocator& _alloc)
    : ROLL(_alloc)
    , PITCH(_alloc)
    , YAW(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _ROLL_type;
  _ROLL_type ROLL;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _PITCH_type;
  _PITCH_type PITCH;

   typedef std::vector<int8_t, typename ContainerAllocator::template rebind<int8_t>::other >  _YAW_type;
  _YAW_type YAW;




  typedef boost::shared_ptr< ::mate_rov::imu_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mate_rov::imu_<ContainerAllocator> const> ConstPtr;

}; // struct imu_

typedef ::mate_rov::imu_<std::allocator<void> > imu;

typedef boost::shared_ptr< ::mate_rov::imu > imuPtr;
typedef boost::shared_ptr< ::mate_rov::imu const> imuConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mate_rov::imu_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mate_rov::imu_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mate_rov

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'mate_rov': ['/home/yonahel/MATE_ROV/mate_ws/src/mate_rov/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::mate_rov::imu_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mate_rov::imu_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mate_rov::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mate_rov::imu_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mate_rov::imu_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mate_rov::imu_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mate_rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3141cc15df7997c4cd96f009a687db8";
  }

  static const char* value(const ::mate_rov::imu_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3141cc15df7997cULL;
  static const uint64_t static_value2 = 0x4cd96f009a687db8ULL;
};

template<class ContainerAllocator>
struct DataType< ::mate_rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mate_rov/imu";
  }

  static const char* value(const ::mate_rov::imu_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mate_rov::imu_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8[] ROLL\n\
int8[] PITCH\n\
int8[] YAW\n\
";
  }

  static const char* value(const ::mate_rov::imu_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mate_rov::imu_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROLL);
      stream.next(m.PITCH);
      stream.next(m.YAW);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct imu_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mate_rov::imu_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mate_rov::imu_<ContainerAllocator>& v)
  {
    s << indent << "ROLL[]" << std::endl;
    for (size_t i = 0; i < v.ROLL.size(); ++i)
    {
      s << indent << "  ROLL[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.ROLL[i]);
    }
    s << indent << "PITCH[]" << std::endl;
    for (size_t i = 0; i < v.PITCH.size(); ++i)
    {
      s << indent << "  PITCH[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.PITCH[i]);
    }
    s << indent << "YAW[]" << std::endl;
    for (size_t i = 0; i < v.YAW.size(); ++i)
    {
      s << indent << "  YAW[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.YAW[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MATE_ROV_MESSAGE_IMU_H
